#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "ht.h"
#include "lib.h"
#include "jni.h"
#include "jni_proxy.h"

struct JNIProxy** jni_proxy;
JNIEnv* jni_env;

static void
jni_Disabled(void* e)
{
    (*jni_env)->FatalError(jni_env, "The requested JNI callback is disabled in this sandbox");
}

static jint
jni_GetVersion(void*)
{
    return (*jni_env)->GetVersion(jni_env);
}

static jsize
jni_GetArrayLength(void*, jarray array)
{
    return (*jni_env)->GetArrayLength(jni_env, array);
}

// TODO: sanitize name and buf
static jclass
jni_DefineClass(void*, const char* name, jobject loader, const jbyte* buf, jsize len)
{
    return (*jni_env)->DefineClass(jni_env, name, loader, buf, len);
}

// TODO: sanitize name
static jclass
jni_FindClass(void*, const char* name)
{
    return (*jni_env)->FindClass(jni_env, name);
}

static jmethodID
jni_FromReflectedMethod(void*, jobject method)
{
    return (*jni_env)->FromReflectedMethod(jni_env, method);
}

static jfieldID
jni_FromReflectedField(void*, jobject field)
{
    return (*jni_env)->FromReflectedField(jni_env, field);
}

static jobject
jni_ToReflectedMethod(void*, jclass cls, jmethodID methodID, jboolean isStatic)
{
    return (*jni_env)->ToReflectedMethod(jni_env, cls, methodID, isStatic);
}

static jclass
jni_GetSuperclass(void*, jclass sub)
{
    return (*jni_env)->GetSuperclass(jni_env, sub);
}

static jboolean
jni_IsAssignableFrom(void*, jclass sub, jclass sup)
{
    return (*jni_env)->IsAssignableFrom(jni_env, sub, sup);
}

static jobject
jni_ToReflectedField(void*, jclass cls, jfieldID fieldID, jboolean isStatic)
{
    return (*jni_env)->ToReflectedField(jni_env, cls, fieldID, isStatic);
}

static jobject
jni_AllocObject(void*, jclass clazz)
{
    return (*jni_env)->AllocObject(jni_env, clazz);
}

// TODO: sanitize args
static jobject
jni_NewObjectV(void*, jclass clazz, jmethodID methodID, va_list args)
{
    return (*jni_env)->NewObjectV(jni_env, clazz, methodID, args);
}

// TODO: sanitize args
static jobject
jni_NewObjectA(void*, jclass clazz, jmethodID methodID, const jvalue* args)
{
    return (*jni_env)->NewObjectA(jni_env, clazz, methodID, args);
}

static jclass
jni_GetObjectClass(void*, jobject obj)
{
    return (*jni_env)->GetObjectClass(jni_env, obj);
}

static jboolean
jni_IsInstanceOf(void*, jobject obj, jclass clazz)
{
    return (*jni_env)->IsInstanceOf(jni_env, obj, clazz);
}

static jint
jni_Throw(void*, jthrowable obj)
{
    return (*jni_env)->Throw(jni_env, obj);
}

static jint
jni_ThrowNew(void*, jclass clazz, const char* msg)
{
    // TODO: sanitize msg
    return (*jni_env)->ThrowNew(jni_env, clazz, msg);
}

static jthrowable
jni_ExceptionOccurred(void*)
{
    return (*jni_env)->ExceptionOccurred(jni_env);
}

static void
jni_ExceptionDescribe(void*)
{
    (*jni_env)->ExceptionDescribe(jni_env);
}

static void
jni_ExceptionClear(void*)
{
    (*jni_env)->ExceptionClear(jni_env);
}

static void
jni_FatalError(void*, const char* msg)
{
    // TODO: sanitize msg
    (*jni_env)->FatalError(jni_env, msg);
}

static jfieldID
jni_GetFieldID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetFieldID(jni_env, clazz, name, sig);
}

#define DEFINE_GetField(typename, jtype) \
    static jtype \
    jni_Get##typename##Field(void*, jobject obj, jfieldID fieldID) \
    { \
        return (*jni_env)->Get##typename##Field(jni_env, obj, fieldID); \
    }

#define DEFINE_SetField(typename, jtype) \
    static void \
    jni_Set##typename##Field(void*, jobject obj, jfieldID fieldID, jtype val) \
    { \
        (*jni_env)->Set##typename##Field(jni_env, obj, fieldID, val); \
    }

static jfieldID
jni_GetStaticFieldID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetStaticFieldID(jni_env, clazz, name, sig);
}

#define DEFINE_GetStaticField(typename, jtype) \
    static jtype \
    jni_GetStatic##typename##Field(void*, jobject obj, jfieldID fieldID) \
    { \
        return (*jni_env)->GetStatic##typename##Field(jni_env, obj, fieldID); \
    }

#define DEFINE_SetStaticField(typename, jtype) \
    static void \
    jni_SetStatic##typename##Field(void*, jobject obj, jfieldID fieldID, jtype val) \
    { \
        (*jni_env)->SetStatic##typename##Field(jni_env, obj, fieldID, val); \
    }

DEFINE_GetField(Object, jobject)
DEFINE_GetField(Boolean, jboolean)
DEFINE_GetField(Byte, jbyte)
DEFINE_GetField(Char, jchar)
DEFINE_GetField(Short, jshort)
DEFINE_GetField(Int, jint)
DEFINE_GetField(Long, jlong)
DEFINE_GetField(Float, jfloat)
DEFINE_GetField(Double, jdouble)
DEFINE_SetField(Object, jobject)
DEFINE_SetField(Boolean, jboolean)
DEFINE_SetField(Byte, jbyte)
DEFINE_SetField(Char, jchar)
DEFINE_SetField(Short, jshort)
DEFINE_SetField(Int, jint)
DEFINE_SetField(Long, jlong)
DEFINE_SetField(Float, jfloat)
DEFINE_SetField(Double, jdouble)
DEFINE_GetStaticField(Object, jobject)
DEFINE_GetStaticField(Boolean, jboolean)
DEFINE_GetStaticField(Byte, jbyte)
DEFINE_GetStaticField(Char, jchar)
DEFINE_GetStaticField(Short, jshort)
DEFINE_GetStaticField(Int, jint)
DEFINE_GetStaticField(Long, jlong)
DEFINE_GetStaticField(Float, jfloat)
DEFINE_GetStaticField(Double, jdouble)
DEFINE_SetStaticField(Object, jobject)
DEFINE_SetStaticField(Boolean, jboolean)
DEFINE_SetStaticField(Byte, jbyte)
DEFINE_SetStaticField(Char, jchar)
DEFINE_SetStaticField(Short, jshort)
DEFINE_SetStaticField(Int, jint)
DEFINE_SetStaticField(Long, jlong)
DEFINE_SetStaticField(Float, jfloat)
DEFINE_SetStaticField(Double, jdouble)

static ht_t jni_buffers;

#define DEFINE_GetArrayElements(typename, jtype) \
    static jtype* \
    jni_Get##typename##ArrayElements(void*, jtype##Array array, jboolean* isCopy) \
    { \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        jtype* sandbox_array = {{.lib}}_malloc(len * sizeof(jtype)); \
        if (!sandbox_array) \
            return NULL; \
        jtype* native_array = (*jni_env)->Get##typename##ArrayElements(jni_env, array, isCopy); \
        assert(native_array); \
        memcpy(sandbox_array, native_array, len * sizeof(jtype)); \
        int ok = ht_put(&jni_buffers, sandbox_array, native_array); \
        assert(ok >= 0); \
        return sandbox_array; \
    }

#define DEFINE_ReleaseArrayElements(typename, jtype) \
    static void \
    jni_Release##typename##ArrayElements(void* e, jtype##Array array, jtype* sandbox_array, jint mode) \
    { \
        bool found; \
        void* native_array = ht_get(&jni_buffers, sandbox_array, &found); \
        if (!found) \
            return; \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        switch (mode) { \
        case 0: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, 0); \
            break; \
        case JNI_COMMIT: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_COMMIT); \
            break; \
        case JNI_ABORT: \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_ABORT); \
            break; \
        } \
    }

// TODO: sanitize buf
#define DEFINE_SetArrayRegion(typename, jtype) \
    static void \
    jni_Set##typename##ArrayRegion(void*, jtype##Array array, jsize start, jsize len, const jtype* buf) \
    { \
        (*jni_env)->Set##typename##ArrayRegion(jni_env, array, start, len, buf); \
    }

#define DEFINE_NewArray(typename, jtype) \
    static jtype##Array \
    jni_New##typename##Array(void*, jsize len) \
    { \
        return (*jni_env)->New##typename##Array(jni_env, len); \
    }

DEFINE_GetArrayElements(Boolean, jboolean)
DEFINE_GetArrayElements(Byte, jbyte)
DEFINE_GetArrayElements(Char, jchar)
DEFINE_GetArrayElements(Short, jshort)
DEFINE_GetArrayElements(Int, jint)
DEFINE_GetArrayElements(Long, jlong)
DEFINE_GetArrayElements(Float, jfloat)
DEFINE_GetArrayElements(Double, jdouble)
DEFINE_NewArray(Boolean, jboolean)
DEFINE_NewArray(Byte, jbyte)
DEFINE_NewArray(Char, jchar)
DEFINE_NewArray(Short, jshort)
DEFINE_NewArray(Int, jint)
DEFINE_NewArray(Long, jlong)
DEFINE_NewArray(Float, jfloat)
DEFINE_NewArray(Double, jdouble)
DEFINE_SetArrayRegion(Boolean, jboolean)
DEFINE_SetArrayRegion(Byte, jbyte)
DEFINE_SetArrayRegion(Char, jchar)
DEFINE_SetArrayRegion(Short, jshort)
DEFINE_SetArrayRegion(Int, jint)
DEFINE_SetArrayRegion(Long, jlong)
DEFINE_SetArrayRegion(Float, jfloat)
DEFINE_SetArrayRegion(Double, jdouble)
DEFINE_ReleaseArrayElements(Boolean, jboolean)
DEFINE_ReleaseArrayElements(Byte, jbyte)
DEFINE_ReleaseArrayElements(Char, jchar)
DEFINE_ReleaseArrayElements(Short, jshort)
DEFINE_ReleaseArrayElements(Int, jint)
DEFINE_ReleaseArrayElements(Long, jlong)
DEFINE_ReleaseArrayElements(Float, jfloat)
DEFINE_ReleaseArrayElements(Double, jdouble)

static jmethodID
jni_GetMethodID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetMethodID(jni_env, clazz, name, sig);
}

static jmethodID
jni_GetStaticMethodID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetStaticMethodID(jni_env, clazz, name, sig);
}

// TODO: sanitize args
#define DEFINE_CallMethodV(typename, jtype) \
    static jtype \
    jni_Call##typename##MethodV(void*, jobject obj, jmethodID methodID, va_list args) \
    { \
        return (*jni_env)->Call##typename##MethodV(jni_env, obj, methodID, args); \
    }

// TODO: sanitize args
#define DEFINE_CallMethodA(typename, jtype) \
    static jtype \
    jni_Call##typename##MethodA(void*, jobject obj, jmethodID methodID, jvalue* args) \
    { \
        return (*jni_env)->Call##typename##MethodA(jni_env, obj, methodID, args); \
    }

// TODO: sanitize args
static void
jni_CallVoidMethodV(void*, jobject obj, jmethodID methodID, va_list args)
{
    (*jni_env)->CallVoidMethodV(jni_env, obj, methodID, args);
}

// TODO: sanitize args
static void
jni_CallVoidMethodA(void*, jobject obj, jmethodID methodID, jvalue* args)
{
    (*jni_env)->CallVoidMethodA(jni_env, obj, methodID, args);
}

// TODO: sanitize args
#define DEFINE_CallNonvirtualMethodV(typename, jtype) \
    static jtype \
    jni_CallNonvirtual##typename##MethodV(void*, jobject obj, jclass clazz, jmethodID methodID, va_list args) \
    { \
        return (*jni_env)->CallNonvirtual##typename##MethodV(jni_env, obj, clazz, methodID, args); \
    }

// TODO: sanitize args
#define DEFINE_CallNonvirtualMethodA(typename, jtype) \
    static jtype \
    jni_CallNonvirtual##typename##MethodA(void*, jobject obj, jclass clazz, jmethodID methodID, jvalue* args) \
    { \
        return (*jni_env)->CallNonvirtual##typename##MethodA(jni_env, obj, clazz, methodID, args); \
    }

// TODO: sanitize args
static void
jni_CallNonvirtualVoidMethodV(void*, jobject obj, jclass clazz, jmethodID methodID, va_list args)
{
    (*jni_env)->CallNonvirtualVoidMethodV(jni_env, obj, clazz, methodID, args);
}

// TODO: sanitize args
static void
jni_CallNonvirtualVoidMethodA(void*, jobject obj, jclass clazz, jmethodID methodID, jvalue* args)
{
    (*jni_env)->CallNonvirtualVoidMethodA(jni_env, obj, clazz, methodID, args);
}

// TODO: sanitize args
#define DEFINE_CallStaticMethodV(typename, jtype) \
    static jtype \
    jni_CallStatic##typename##MethodV(void*, jclass clazz, jmethodID methodID, va_list args) \
    { \
        return (*jni_env)->CallStatic##typename##MethodV(jni_env, clazz, methodID, args); \
    }

// TODO: sanitize args
#define DEFINE_CallStaticMethodA(typename, jtype) \
    static jtype \
    jni_CallStatic##typename##MethodA(void*, jclass clazz, jmethodID methodID, jvalue* args) \
    { \
        return (*jni_env)->CallStatic##typename##MethodA(jni_env, clazz, methodID, args); \
    }

// TODO: sanitize args
static void
jni_CallStaticVoidMethodV(void*, jclass clazz, jmethodID methodID, va_list args)
{
    (*jni_env)->CallStaticVoidMethodV(jni_env, clazz, methodID, args);
}

// TODO: sanitize args
static void
jni_CallStaticVoidMethodA(void*, jclass clazz, jmethodID methodID, jvalue* args)
{
    (*jni_env)->CallStaticVoidMethodA(jni_env, clazz, methodID, args);
}

DEFINE_CallMethodV(Object, jobject)
DEFINE_CallMethodV(Boolean, jboolean)
DEFINE_CallMethodV(Byte, jbyte)
DEFINE_CallMethodV(Char, jchar)
DEFINE_CallMethodV(Short, jshort)
DEFINE_CallMethodV(Int, jint)
DEFINE_CallMethodV(Long, jlong)
DEFINE_CallMethodV(Float, jfloat)
DEFINE_CallMethodV(Double, jdouble)
DEFINE_CallMethodA(Object, jobject)
DEFINE_CallMethodA(Boolean, jboolean)
DEFINE_CallMethodA(Byte, jbyte)
DEFINE_CallMethodA(Char, jchar)
DEFINE_CallMethodA(Short, jshort)
DEFINE_CallMethodA(Int, jint)
DEFINE_CallMethodA(Long, jlong)
DEFINE_CallMethodA(Float, jfloat)
DEFINE_CallMethodA(Double, jdouble)

DEFINE_CallNonvirtualMethodV(Object, jobject)
DEFINE_CallNonvirtualMethodV(Boolean, jboolean)
DEFINE_CallNonvirtualMethodV(Byte, jbyte)
DEFINE_CallNonvirtualMethodV(Char, jchar)
DEFINE_CallNonvirtualMethodV(Short, jshort)
DEFINE_CallNonvirtualMethodV(Int, jint)
DEFINE_CallNonvirtualMethodV(Long, jlong)
DEFINE_CallNonvirtualMethodV(Float, jfloat)
DEFINE_CallNonvirtualMethodV(Double, jdouble)
DEFINE_CallNonvirtualMethodA(Object, jobject)
DEFINE_CallNonvirtualMethodA(Boolean, jboolean)
DEFINE_CallNonvirtualMethodA(Byte, jbyte)
DEFINE_CallNonvirtualMethodA(Char, jchar)
DEFINE_CallNonvirtualMethodA(Short, jshort)
DEFINE_CallNonvirtualMethodA(Int, jint)
DEFINE_CallNonvirtualMethodA(Long, jlong)
DEFINE_CallNonvirtualMethodA(Float, jfloat)
DEFINE_CallNonvirtualMethodA(Double, jdouble)

DEFINE_CallStaticMethodV(Object, jobject)
DEFINE_CallStaticMethodV(Boolean, jboolean)
DEFINE_CallStaticMethodV(Byte, jbyte)
DEFINE_CallStaticMethodV(Char, jchar)
DEFINE_CallStaticMethodV(Short, jshort)
DEFINE_CallStaticMethodV(Int, jint)
DEFINE_CallStaticMethodV(Long, jlong)
DEFINE_CallStaticMethodV(Float, jfloat)
DEFINE_CallStaticMethodV(Double, jdouble)
DEFINE_CallStaticMethodA(Object, jobject)
DEFINE_CallStaticMethodA(Boolean, jboolean)
DEFINE_CallStaticMethodA(Byte, jbyte)
DEFINE_CallStaticMethodA(Char, jchar)
DEFINE_CallStaticMethodA(Short, jshort)
DEFINE_CallStaticMethodA(Int, jint)
DEFINE_CallStaticMethodA(Long, jlong)
DEFINE_CallStaticMethodA(Float, jfloat)
DEFINE_CallStaticMethodA(Double, jdouble)

extern void* __lfisym__lfi_jni_NewObject;
#define DEFINE_CallMethod(method) \
    extern void* __lfisym__lfi_jni_##method##ObjectMethod; \
    extern void* __lfisym__lfi_jni_##method##BooleanMethod; \
    extern void* __lfisym__lfi_jni_##method##ByteMethod; \
    extern void* __lfisym__lfi_jni_##method##CharMethod; \
    extern void* __lfisym__lfi_jni_##method##ShortMethod; \
    extern void* __lfisym__lfi_jni_##method##IntMethod; \
    extern void* __lfisym__lfi_jni_##method##LongMethod; \
    extern void* __lfisym__lfi_jni_##method##FloatMethod; \
    extern void* __lfisym__lfi_jni_##method##DoubleMethod; \
    extern void* __lfisym__lfi_jni_##method##VoidMethod;

DEFINE_CallMethod(Call)
DEFINE_CallMethod(CallNonvirtual)
DEFINE_CallMethod(CallStatic)

bool
lfi_jni_init(void)
{
    struct JNIProxy* proxy = {{ .lib }}_malloc(sizeof(struct JNIProxy));
    if (!proxy) {
        fprintf(stderr, "proxy object allocation failed\n");
        goto err1;
    }
    memset(proxy, 0, sizeof(struct JNIProxy));
    jni_proxy = {{ .lib }}_malloc(sizeof(struct JNIProxy*));
    if (!jni_proxy) {
        fprintf(stderr, "failed to allocate jni_proxy pointer\n");
        goto err2;
    }

    if (ht_alloc(&jni_buffers, 16) < 0)
        goto err3;

    void* disabled = {{ .lib }}_register_cb(&jni_Disabled, 0);
    assert(disabled);

    void** fns = (void**) proxy;
    for (size_t i = 4; i < sizeof(struct JNIProxy) / sizeof(void*); i++) {
        fns[i] = disabled;
    }

    *jni_proxy = proxy;

#define JNI_REGISTER(func)                           \
    do {                                             \
        void* fn = {{ .lib }}_register_cb(&func, 0); \
        assert(fn);                                  \
        proxy->func = fn;                            \
    } while (0)                                      \

#define JNI_REGISTER_INTERNAL(func)                  \
    do {                                             \
        proxy->func = __lfisym__lfi_##func;          \
    } while (0)                                      \


    JNI_REGISTER(jni_GetVersion);
    JNI_REGISTER(jni_GetArrayLength);
    JNI_REGISTER(jni_DefineClass);
    JNI_REGISTER(jni_FromReflectedMethod);
    JNI_REGISTER(jni_FromReflectedField);
    JNI_REGISTER(jni_ToReflectedMethod);
    JNI_REGISTER(jni_GetSuperclass);
    JNI_REGISTER(jni_IsAssignableFrom);
    JNI_REGISTER(jni_ToReflectedField);
    JNI_REGISTER(jni_AllocObject);
    JNI_REGISTER(jni_NewObjectV);
    JNI_REGISTER(jni_NewObjectA);
    JNI_REGISTER(jni_GetObjectClass);
    JNI_REGISTER(jni_IsInstanceOf);
    JNI_REGISTER(jni_NewBooleanArray);
    JNI_REGISTER(jni_NewByteArray);
    JNI_REGISTER(jni_NewCharArray);
    JNI_REGISTER(jni_NewShortArray);
    JNI_REGISTER(jni_NewIntArray);
    JNI_REGISTER(jni_NewLongArray);
    JNI_REGISTER(jni_NewFloatArray);
    JNI_REGISTER(jni_NewDoubleArray);
    JNI_REGISTER(jni_GetBooleanArrayElements);
    JNI_REGISTER(jni_GetByteArrayElements);
    JNI_REGISTER(jni_GetCharArrayElements);
    JNI_REGISTER(jni_GetShortArrayElements);
    JNI_REGISTER(jni_GetIntArrayElements);
    JNI_REGISTER(jni_GetLongArrayElements);
    JNI_REGISTER(jni_GetFloatArrayElements);
    JNI_REGISTER(jni_GetDoubleArrayElements);
    JNI_REGISTER(jni_ReleaseBooleanArrayElements);
    JNI_REGISTER(jni_ReleaseByteArrayElements);
    JNI_REGISTER(jni_ReleaseCharArrayElements);
    JNI_REGISTER(jni_ReleaseShortArrayElements);
    JNI_REGISTER(jni_ReleaseIntArrayElements);
    JNI_REGISTER(jni_ReleaseLongArrayElements);
    JNI_REGISTER(jni_ReleaseFloatArrayElements);
    JNI_REGISTER(jni_ReleaseDoubleArrayElements);
    JNI_REGISTER(jni_SetBooleanArrayRegion);
    JNI_REGISTER(jni_SetByteArrayRegion);
    JNI_REGISTER(jni_SetCharArrayRegion);
    JNI_REGISTER(jni_SetShortArrayRegion);
    JNI_REGISTER(jni_SetIntArrayRegion);
    JNI_REGISTER(jni_SetLongArrayRegion);
    JNI_REGISTER(jni_SetFloatArrayRegion);
    JNI_REGISTER(jni_SetDoubleArrayRegion);
    JNI_REGISTER(jni_GetFieldID);
    JNI_REGISTER(jni_GetObjectField);
    JNI_REGISTER(jni_GetBooleanField);
    JNI_REGISTER(jni_GetByteField);
    JNI_REGISTER(jni_GetCharField);
    JNI_REGISTER(jni_GetShortField);
    JNI_REGISTER(jni_GetIntField);
    JNI_REGISTER(jni_GetLongField);
    JNI_REGISTER(jni_GetFloatField);
    JNI_REGISTER(jni_GetDoubleField);
    JNI_REGISTER(jni_SetObjectField);
    JNI_REGISTER(jni_SetBooleanField);
    JNI_REGISTER(jni_SetByteField);
    JNI_REGISTER(jni_SetCharField);
    JNI_REGISTER(jni_SetShortField);
    JNI_REGISTER(jni_SetIntField);
    JNI_REGISTER(jni_SetLongField);
    JNI_REGISTER(jni_SetFloatField);
    JNI_REGISTER(jni_SetDoubleField);
    JNI_REGISTER(jni_GetStaticFieldID);
    JNI_REGISTER(jni_GetStaticObjectField);
    JNI_REGISTER(jni_GetStaticBooleanField);
    JNI_REGISTER(jni_GetStaticByteField);
    JNI_REGISTER(jni_GetStaticCharField);
    JNI_REGISTER(jni_GetStaticShortField);
    JNI_REGISTER(jni_GetStaticIntField);
    JNI_REGISTER(jni_GetStaticLongField);
    JNI_REGISTER(jni_GetStaticFloatField);
    JNI_REGISTER(jni_GetStaticDoubleField);
    JNI_REGISTER(jni_SetStaticObjectField);
    JNI_REGISTER(jni_SetStaticBooleanField);
    JNI_REGISTER(jni_SetStaticByteField);
    JNI_REGISTER(jni_SetStaticCharField);
    JNI_REGISTER(jni_SetStaticShortField);
    JNI_REGISTER(jni_SetStaticIntField);
    JNI_REGISTER(jni_SetStaticLongField);
    JNI_REGISTER(jni_SetStaticFloatField);
    JNI_REGISTER(jni_SetStaticDoubleField);
    JNI_REGISTER(jni_Throw);
    JNI_REGISTER(jni_ThrowNew);
    JNI_REGISTER(jni_ExceptionOccurred);
    JNI_REGISTER(jni_ExceptionDescribe);
    JNI_REGISTER(jni_ExceptionClear);
    JNI_REGISTER(jni_FatalError);
    JNI_REGISTER(jni_CallObjectMethodV);
    JNI_REGISTER(jni_CallObjectMethodA);
    JNI_REGISTER(jni_CallBooleanMethodV);
    JNI_REGISTER(jni_CallBooleanMethodA);
    JNI_REGISTER(jni_CallByteMethodV);
    JNI_REGISTER(jni_CallByteMethodA);
    JNI_REGISTER(jni_CallCharMethodV);
    JNI_REGISTER(jni_CallCharMethodA);
    JNI_REGISTER(jni_CallShortMethodV);
    JNI_REGISTER(jni_CallShortMethodA);
    JNI_REGISTER(jni_CallIntMethodV);
    JNI_REGISTER(jni_CallIntMethodA);
    JNI_REGISTER(jni_CallLongMethodV);
    JNI_REGISTER(jni_CallLongMethodA);
    JNI_REGISTER(jni_CallFloatMethodV);
    JNI_REGISTER(jni_CallFloatMethodA);
    JNI_REGISTER(jni_CallDoubleMethodV);
    JNI_REGISTER(jni_CallDoubleMethodA);
    JNI_REGISTER(jni_CallVoidMethodV);
    JNI_REGISTER(jni_CallVoidMethodA);
    JNI_REGISTER(jni_CallNonvirtualObjectMethodV);
    JNI_REGISTER(jni_CallNonvirtualObjectMethodA);
    JNI_REGISTER(jni_CallNonvirtualBooleanMethodV);
    JNI_REGISTER(jni_CallNonvirtualBooleanMethodA);
    JNI_REGISTER(jni_CallNonvirtualByteMethodV);
    JNI_REGISTER(jni_CallNonvirtualByteMethodA);
    JNI_REGISTER(jni_CallNonvirtualCharMethodV);
    JNI_REGISTER(jni_CallNonvirtualCharMethodA);
    JNI_REGISTER(jni_CallNonvirtualShortMethodV);
    JNI_REGISTER(jni_CallNonvirtualShortMethodA);
    JNI_REGISTER(jni_CallNonvirtualIntMethodV);
    JNI_REGISTER(jni_CallNonvirtualIntMethodA);
    JNI_REGISTER(jni_CallNonvirtualLongMethodV);
    JNI_REGISTER(jni_CallNonvirtualLongMethodA);
    JNI_REGISTER(jni_CallNonvirtualFloatMethodV);
    JNI_REGISTER(jni_CallNonvirtualFloatMethodA);
    JNI_REGISTER(jni_CallNonvirtualDoubleMethodV);
    JNI_REGISTER(jni_CallNonvirtualDoubleMethodA);
    JNI_REGISTER(jni_CallNonvirtualVoidMethodV);
    JNI_REGISTER(jni_CallNonvirtualVoidMethodA);
    JNI_REGISTER(jni_CallStaticObjectMethodV);
    JNI_REGISTER(jni_CallStaticObjectMethodA);
    JNI_REGISTER(jni_CallStaticBooleanMethodV);
    JNI_REGISTER(jni_CallStaticBooleanMethodA);
    JNI_REGISTER(jni_CallStaticByteMethodV);
    JNI_REGISTER(jni_CallStaticByteMethodA);
    JNI_REGISTER(jni_CallStaticCharMethodV);
    JNI_REGISTER(jni_CallStaticCharMethodA);
    JNI_REGISTER(jni_CallStaticShortMethodV);
    JNI_REGISTER(jni_CallStaticShortMethodA);
    JNI_REGISTER(jni_CallStaticIntMethodV);
    JNI_REGISTER(jni_CallStaticIntMethodA);
    JNI_REGISTER(jni_CallStaticLongMethodV);
    JNI_REGISTER(jni_CallStaticLongMethodA);
    JNI_REGISTER(jni_CallStaticFloatMethodV);
    JNI_REGISTER(jni_CallStaticFloatMethodA);
    JNI_REGISTER(jni_CallStaticDoubleMethodV);
    JNI_REGISTER(jni_CallStaticDoubleMethodA);
    JNI_REGISTER(jni_CallStaticVoidMethodV);
    JNI_REGISTER(jni_CallStaticVoidMethodA);
    JNI_REGISTER(jni_GetMethodID);
    JNI_REGISTER(jni_GetStaticMethodID);
    JNI_REGISTER_INTERNAL(jni_CallObjectMethod);
    JNI_REGISTER_INTERNAL(jni_CallBooleanMethod);
    JNI_REGISTER_INTERNAL(jni_CallByteMethod);
    JNI_REGISTER_INTERNAL(jni_CallCharMethod);
    JNI_REGISTER_INTERNAL(jni_CallShortMethod);
    JNI_REGISTER_INTERNAL(jni_CallIntMethod);
    JNI_REGISTER_INTERNAL(jni_CallLongMethod);
    JNI_REGISTER_INTERNAL(jni_CallFloatMethod);
    JNI_REGISTER_INTERNAL(jni_CallDoubleMethod);
    JNI_REGISTER_INTERNAL(jni_CallVoidMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualObjectMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualBooleanMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualByteMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualCharMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualShortMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualIntMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualLongMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualFloatMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualDoubleMethod);
    JNI_REGISTER_INTERNAL(jni_CallNonvirtualVoidMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticObjectMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticBooleanMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticByteMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticCharMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticShortMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticIntMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticLongMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticFloatMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticDoubleMethod);
    JNI_REGISTER_INTERNAL(jni_CallStaticVoidMethod);
    JNI_REGISTER_INTERNAL(jni_NewObject);

    return true;

err3:
    {{ .lib }}_free(jni_proxy);
err2:
    {{ .lib }}_free(proxy);
err1:
    return false;
}

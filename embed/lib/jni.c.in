#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "ht.h"
#include "lib.h"
#include "jni.h"

struct JNIProxyObject {
    void* res0;
    void* res1;
    void* res2;

    void* res3;

    void* jni_GetVersion;

    void* jni_DefineClass;
    void* jni_FindClass;

    void* jni_FromReflectedMethod;
    void* jni_FromReflectedField;

    void* jni_ToReflectedMethod;

    void* jni_GetSuperclass;
    void* jni_IsAssignableFrom;

    void* jni_ToReflectedField;

    void* jni_Throw;
    void* jni_ThrowNew;
    void* jni_ExceptionOccurred;
    void* jni_ExceptionDescribe;
    void* jni_ExceptionClear;
    void* jni_FatalError;

    void* jni_PushLocalFrame;
    void* jni_PopLocalFrame;

    void* jni_NewGlobalRef;
    void* jni_DeleteGlobalRef;
    void* jni_DeleteLocalRef;
    void* jni_IsSameObject;

    void* jni_NewLocalRef;
    void* jni_EnsureLocalCapacity;

    void* jni_AllocObject;
    void* jni_NewObject;
    void* jni_NewObjectV;
    void* jni_NewObjectA;

    void* jni_GetObjectClass;
    void* jni_IsInstanceOf;

    void* jni_GetMethodID;

    void* jni_CallObjectMethod;
    void* jni_CallObjectMethodV;
    void* jni_CallObjectMethodA;
    void* jni_CallBooleanMethod;
    void* jni_CallBooleanMethodV;
    void* jni_CallBooleanMethodA;
    void* jni_CallByteMethod;
    void* jni_CallByteMethodV;
    void* jni_CallByteMethodA;
    void* jni_CallCharMethod;
    void* jni_CallCharMethodV;
    void* jni_CallCharMethodA;
    void* jni_CallShortMethod;
    void* jni_CallShortMethodV;
    void* jni_CallShortMethodA;
    void* jni_CallIntMethod;
    void* jni_CallIntMethodV;
    void* jni_CallIntMethodA;
    void* jni_CallLongMethod;
    void* jni_CallLongMethodV;
    void* jni_CallLongMethodA;
    void* jni_CallFloatMethod;
    void* jni_CallFloatMethodV;
    void* jni_CallFloatMethodA;
    void* jni_CallDoubleMethod;
    void* jni_CallDoubleMethodV;
    void* jni_CallDoubleMethodA;
    void* jni_CallVoidMethod;
    void* jni_CallVoidMethodV;
    void* jni_CallVoidMethodA;

    void* jni_CallNonvirtualObjectMethod;
    void* jni_CallNonvirtualObjectMethodV;
    void* jni_CallNonvirtualObjectMethodA;
    void* jni_CallNonvirtualBooleanMethod;
    void* jni_CallNonvirtualBooleanMethodV;
    void* jni_CallNonvirtualBooleanMethodA;
    void* jni_CallNonvirtualByteMethod;
    void* jni_CallNonvirtualByteMethodV;
    void* jni_CallNonvirtualByteMethodA;
    void* jni_CallNonvirtualCharMethod;
    void* jni_CallNonvirtualCharMethodV;
    void* jni_CallNonvirtualCharMethodA;
    void* jni_CallNonvirtualShortMethod;
    void* jni_CallNonvirtualShortMethodV;
    void* jni_CallNonvirtualShortMethodA;
    void* jni_CallNonvirtualIntMethod;
    void* jni_CallNonvirtualIntMethodV;
    void* jni_CallNonvirtualIntMethodA;
    void* jni_CallNonvirtualLongMethod;
    void* jni_CallNonvirtualLongMethodV;
    void* jni_CallNonvirtualLongMethodA;
    void* jni_CallNonvirtualFloatMethod;
    void* jni_CallNonvirtualFloatMethodV;
    void* jni_CallNonvirtualFloatMethodA;
    void* jni_CallNonvirtualDoubleMethod;
    void* jni_CallNonvirtualDoubleMethodV;
    void* jni_CallNonvirtualDoubleMethodA;
    void* jni_CallNonvirtualVoidMethod;
    void* jni_CallNonvirtualVoidMethodV;
    void* jni_CallNonvirtualVoidMethodA;

    void* jni_GetFieldID;

    void* jni_GetObjectField;
    void* jni_GetBooleanField;
    void* jni_GetByteField;
    void* jni_GetCharField;
    void* jni_GetShortField;
    void* jni_GetIntField;
    void* jni_GetLongField;
    void* jni_GetFloatField;
    void* jni_GetDoubleField;

    void* jni_SetObjectField;
    void* jni_SetBooleanField;
    void* jni_SetByteField;
    void* jni_SetCharField;
    void* jni_SetShortField;
    void* jni_SetIntField;
    void* jni_SetLongField;
    void* jni_SetFloatField;
    void* jni_SetDoubleField;

    void* jni_GetStaticMethodID;

    void* jni_CallStaticObjectMethod;
    void* jni_CallStaticObjectMethodV;
    void* jni_CallStaticObjectMethodA;
    void* jni_CallStaticBooleanMethod;
    void* jni_CallStaticBooleanMethodV;
    void* jni_CallStaticBooleanMethodA;
    void* jni_CallStaticByteMethod;
    void* jni_CallStaticByteMethodV;
    void* jni_CallStaticByteMethodA;
    void* jni_CallStaticCharMethod;
    void* jni_CallStaticCharMethodV;
    void* jni_CallStaticCharMethodA;
    void* jni_CallStaticShortMethod;
    void* jni_CallStaticShortMethodV;
    void* jni_CallStaticShortMethodA;
    void* jni_CallStaticIntMethod;
    void* jni_CallStaticIntMethodV;
    void* jni_CallStaticIntMethodA;
    void* jni_CallStaticLongMethod;
    void* jni_CallStaticLongMethodV;
    void* jni_CallStaticLongMethodA;
    void* jni_CallStaticFloatMethod;
    void* jni_CallStaticFloatMethodV;
    void* jni_CallStaticFloatMethodA;
    void* jni_CallStaticDoubleMethod;
    void* jni_CallStaticDoubleMethodV;
    void* jni_CallStaticDoubleMethodA;
    void* jni_CallStaticVoidMethod;
    void* jni_CallStaticVoidMethodV;
    void* jni_CallStaticVoidMethodA;

    void* jni_GetStaticFieldID;

    void* jni_GetStaticObjectField;
    void* jni_GetStaticBooleanField;
    void* jni_GetStaticByteField;
    void* jni_GetStaticCharField;
    void* jni_GetStaticShortField;
    void* jni_GetStaticIntField;
    void* jni_GetStaticLongField;
    void* jni_GetStaticFloatField;
    void* jni_GetStaticDoubleField;

    void* jni_SetStaticObjectField;
    void* jni_SetStaticBooleanField;
    void* jni_SetStaticByteField;
    void* jni_SetStaticCharField;
    void* jni_SetStaticShortField;
    void* jni_SetStaticIntField;
    void* jni_SetStaticLongField;
    void* jni_SetStaticFloatField;
    void* jni_SetStaticDoubleField;

    void* jni_NewString;
    void* jni_GetStringLength;
    void* jni_GetStringChars;
    void* jni_ReleaseStringChars;

    void* jni_NewStringUTF;
    void* jni_GetStringUTFLength;
    void* jni_GetStringUTFChars;
    void* jni_ReleaseStringUTFChars;

    void* jni_GetArrayLength;

    void* jni_NewObjectArray;
    void* jni_GetObjectArrayElement;
    void* jni_SetObjectArrayElement;

    void* jni_NewBooleanArray;
    void* jni_NewByteArray;
    void* jni_NewCharArray;
    void* jni_NewShortArray;
    void* jni_NewIntArray;
    void* jni_NewLongArray;
    void* jni_NewFloatArray;
    void* jni_NewDoubleArray;

    void* jni_GetBooleanArrayElements;
    void* jni_GetByteArrayElements;
    void* jni_GetCharArrayElements;
    void* jni_GetShortArrayElements;
    void* jni_GetIntArrayElements;
    void* jni_GetLongArrayElements;
    void* jni_GetFloatArrayElements;
    void* jni_GetDoubleArrayElements;

    void* jni_ReleaseBooleanArrayElements;
    void* jni_ReleaseByteArrayElements;
    void* jni_ReleaseCharArrayElements;
    void* jni_ReleaseShortArrayElements;
    void* jni_ReleaseIntArrayElements;
    void* jni_ReleaseLongArrayElements;
    void* jni_ReleaseFloatArrayElements;
    void* jni_ReleaseDoubleArrayElements;

    void* jni_GetBooleanArrayRegion;
    void* jni_GetByteArrayRegion;
    void* jni_GetCharArrayRegion;
    void* jni_GetShortArrayRegion;
    void* jni_GetIntArrayRegion;
    void* jni_GetLongArrayRegion;
    void* jni_GetFloatArrayRegion;
    void* jni_GetDoubleArrayRegion;

    void* jni_SetBooleanArrayRegion;
    void* jni_SetByteArrayRegion;
    void* jni_SetCharArrayRegion;
    void* jni_SetShortArrayRegion;
    void* jni_SetIntArrayRegion;
    void* jni_SetLongArrayRegion;
    void* jni_SetFloatArrayRegion;
    void* jni_SetDoubleArrayRegion;

    void* jni_RegisterNatives;
    void* jni_UnregisterNatives;

    void* jni_MonitorEnter;
    void* jni_MonitorExit;

    void* jni_GetJavaVM;

    void* jni_GetStringRegion;
    void* jni_GetStringUTFRegion;

    void* jni_GetPrimitiveArrayCritical;
    void* jni_ReleasePrimitiveArrayCritical;

    void* jni_GetStringCritical;
    void* jni_ReleaseStringCritical;

    void* jni_NewWeakGlobalRef;
    void* jni_DeleteWeakGlobalRef;

    void* jni_ExceptionCheck;

    void* jni_NewDirectByteBuffer;
    void* jni_GetDirectBufferAddress;
    void* jni_GetDirectBufferCapacity;

    // New 1_6 features

    void* jni_GetObjectRefType;

    // Module features

    void* jni_GetModule;

    // Virtual threads

    void* jni_IsVirtualThread;
};

struct JNIProxyObject** jni_proxy;
JNIEnv* jni_env;

static void
jni_Disabled(void* e)
{
    jclass exc = (*jni_env)->FindClass(jni_env, "java/lang/RuntimeException");
    if (exc != NULL) { // Check if class was found
        (*jni_env)->ThrowNew(jni_env, exc, "The requested JNI callback is disabled in this sandbox\n");
    }
}

static jint
jni_GetVersion(void* e)
{
    printf("GetVersion called with env: %p\n", e);
    return (*jni_env)->GetVersion(jni_env);
}

static jsize
jni_GetArrayLength(void* e, jarray array)
{
    return (*jni_env)->GetArrayLength(jni_env, array);
}

static ht_t jni_buffers;

#define DEFINE_GetArrayElements(typename, jtype) \
    static jtype* \
    jni_Get##typename##ArrayElements(void*, jtype##Array array, jboolean* isCopy) \
    { \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        jtype* sandbox_array = {{.lib}}_malloc(len * sizeof(jtype)); \
        if (!sandbox_array) \
            return NULL; \
        jtype* native_array = (*jni_env)->Get##typename##ArrayElements(jni_env, array, isCopy); \
        assert(native_array); \
        memcpy(sandbox_array, native_array, len * sizeof(jtype)); \
        int ok = ht_put(&jni_buffers, sandbox_array, native_array); \
        assert(ok >= 0); \
        return sandbox_array; \
    }

#define DEFINE_ReleaseArrayElements(typename, jtype) \
    static void \
    jni_Release##typename##ArrayElements(void* e, jtype##Array array, jtype* sandbox_array, jint mode) \
    { \
        bool found; \
        void* native_array = ht_get(&jni_buffers, sandbox_array, &found); \
        if (!found) \
            return; \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        switch (mode) { \
        case 0: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, 0); \
            break; \
        case JNI_COMMIT: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_COMMIT); \
            break; \
        case JNI_ABORT: \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_ABORT); \
            break; \
        } \
    }

// TODO: make sure buf is inside the sandbox
#define DEFINE_SetArrayRegion(typename, jtype) \
    static void \
    jni_Set##typename##ArrayRegion(void*, jtype##Array array, jsize start, jsize len, const jtype* buf) \
    { \
        (*jni_env)->Set##typename##ArrayRegion(jni_env, array, start, len, buf); \
    }

#define DEFINE_NewArray(typename, jtype) \
    static jtype##Array \
    jni_New##typename##Array(void*, jsize len) \
    { \
        return (*jni_env)->New##typename##Array(jni_env, len); \
    }

DEFINE_GetArrayElements(Boolean, jboolean)
DEFINE_GetArrayElements(Byte, jbyte)
DEFINE_GetArrayElements(Char, jchar)
DEFINE_GetArrayElements(Short, jshort)
DEFINE_GetArrayElements(Int, jint)
DEFINE_GetArrayElements(Long, jlong)
DEFINE_GetArrayElements(Float, jfloat)
DEFINE_GetArrayElements(Double, jdouble)

DEFINE_NewArray(Boolean, jboolean)
DEFINE_NewArray(Byte, jbyte)
DEFINE_NewArray(Char, jchar)
DEFINE_NewArray(Short, jshort)
DEFINE_NewArray(Int, jint)
DEFINE_NewArray(Long, jlong)
DEFINE_NewArray(Float, jfloat)
DEFINE_NewArray(Double, jdouble)

DEFINE_SetArrayRegion(Boolean, jboolean)
DEFINE_SetArrayRegion(Byte, jbyte)
DEFINE_SetArrayRegion(Char, jchar)
DEFINE_SetArrayRegion(Short, jshort)
DEFINE_SetArrayRegion(Int, jint)
DEFINE_SetArrayRegion(Long, jlong)
DEFINE_SetArrayRegion(Float, jfloat)
DEFINE_SetArrayRegion(Double, jdouble)

DEFINE_ReleaseArrayElements(Boolean, jboolean)
DEFINE_ReleaseArrayElements(Byte, jbyte)
DEFINE_ReleaseArrayElements(Char, jchar)
DEFINE_ReleaseArrayElements(Short, jshort)
DEFINE_ReleaseArrayElements(Int, jint)
DEFINE_ReleaseArrayElements(Long, jlong)
DEFINE_ReleaseArrayElements(Float, jfloat)
DEFINE_ReleaseArrayElements(Double, jdouble)

bool
lfi_jni_init(void)
{
    struct JNIProxyObject* proxy = {{ .lib }}_malloc(sizeof(struct JNIProxyObject));
    if (!proxy) {
        fprintf(stderr, "proxy object allocation failed\n");
        goto err1;
    }
    memset(proxy, 0, sizeof(struct JNIProxyObject));
    jni_proxy = {{ .lib }}_malloc(sizeof(struct JNIProxyObject*));
    if (!jni_proxy) {
        fprintf(stderr, "failed to allocate jni_proxy pointer\n");
        goto err2;
    }

    if (ht_alloc(&jni_buffers, 16) < 0)
        goto err3;

    void* disabled = {{ .lib }}_register_cb(&jni_Disabled, 0);
    assert(disabled);

    void** fns = (void**) proxy;
    for (size_t i = 4; i < sizeof(struct JNIProxyObject) / sizeof(void*); i++) {
        fns[i] = disabled;
    }

    *jni_proxy = proxy;

#define JNI_REGISTER(func)                           \
    do {                                             \
        void* fn = {{ .lib }}_register_cb(&func, 0); \
        assert(fn);                                  \
        proxy->func = fn;                            \
    } while (0)                                      \

    JNI_REGISTER(jni_GetVersion);
    JNI_REGISTER(jni_GetArrayLength);
    JNI_REGISTER(jni_NewBooleanArray);
    JNI_REGISTER(jni_NewByteArray);
    JNI_REGISTER(jni_NewCharArray);
    JNI_REGISTER(jni_NewShortArray);
    JNI_REGISTER(jni_NewIntArray);
    JNI_REGISTER(jni_NewLongArray);
    JNI_REGISTER(jni_NewFloatArray);
    JNI_REGISTER(jni_NewDoubleArray);
    JNI_REGISTER(jni_GetBooleanArrayElements);
    JNI_REGISTER(jni_GetByteArrayElements);
    JNI_REGISTER(jni_GetCharArrayElements);
    JNI_REGISTER(jni_GetShortArrayElements);
    JNI_REGISTER(jni_GetIntArrayElements);
    JNI_REGISTER(jni_GetLongArrayElements);
    JNI_REGISTER(jni_GetFloatArrayElements);
    JNI_REGISTER(jni_GetDoubleArrayElements);
    JNI_REGISTER(jni_ReleaseBooleanArrayElements);
    JNI_REGISTER(jni_ReleaseByteArrayElements);
    JNI_REGISTER(jni_ReleaseCharArrayElements);
    JNI_REGISTER(jni_ReleaseShortArrayElements);
    JNI_REGISTER(jni_ReleaseIntArrayElements);
    JNI_REGISTER(jni_ReleaseLongArrayElements);
    JNI_REGISTER(jni_ReleaseFloatArrayElements);
    JNI_REGISTER(jni_ReleaseDoubleArrayElements);
    JNI_REGISTER(jni_SetBooleanArrayRegion);
    JNI_REGISTER(jni_SetByteArrayRegion);
    JNI_REGISTER(jni_SetCharArrayRegion);
    JNI_REGISTER(jni_SetShortArrayRegion);
    JNI_REGISTER(jni_SetIntArrayRegion);
    JNI_REGISTER(jni_SetLongArrayRegion);
    JNI_REGISTER(jni_SetFloatArrayRegion);
    JNI_REGISTER(jni_SetDoubleArrayRegion);

    return true;

err3:
    {{ .lib }}_free(jni_proxy);
err2:
    {{ .lib }}_free(proxy);
err1:
    return false;
}

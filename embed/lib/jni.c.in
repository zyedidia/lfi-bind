#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "ht.h"
#include "lib.h"
#include "jni.h"
#include "jni_proxy.h"

struct JNIProxy** jni_proxy;
JNIEnv* jni_env;

static void
jni_Disabled(void* e)
{
    jclass exc = (*jni_env)->FindClass(jni_env, "java/lang/RuntimeException");
    if (exc != NULL) { // Check if class was found
        (*jni_env)->ThrowNew(jni_env, exc, "The requested JNI callback is disabled in this sandbox\n");
    }
}

static jint
jni_GetVersion(void*)
{
    return (*jni_env)->GetVersion(jni_env);
}

static jsize
jni_GetArrayLength(void*, jarray array)
{
    return (*jni_env)->GetArrayLength(jni_env, array);
}

static jclass
jni_FindClass(void*, const char* name)
{
    // TODO: sanitize name
    return (*jni_env)->FindClass(jni_env, name);
}

static jint
jni_Throw(void*, jthrowable obj)
{
    return (*jni_env)->Throw(jni_env, obj);
}

static jint
jni_ThrowNew(void*, jclass clazz, const char* msg)
{
    // TODO: sanitize msg
    return (*jni_env)->ThrowNew(jni_env, clazz, msg);
}

static jthrowable
jni_ExceptionOccurred(void*)
{
    return (*jni_env)->ExceptionOccurred(jni_env);
}

static void
jni_ExceptionDescribe(void*)
{
    (*jni_env)->ExceptionDescribe(jni_env);
}

static void
jni_ExceptionClear(void*)
{
    (*jni_env)->ExceptionClear(jni_env);
}

static void
jni_FatalError(void*, const char* msg)
{
    // TODO: sanitize msg
    (*jni_env)->FatalError(jni_env, msg);
}

static jfieldID
jni_GetFieldID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetFieldID(jni_env, clazz, name, sig);
}

#define DEFINE_GetField(typename, jtype) \
    static jtype \
    jni_Get##typename##Field(void*, jobject obj, jfieldID fieldID) \
    { \
        return (*jni_env)->Get##typename##Field(jni_env, obj, fieldID); \
    }

#define DEFINE_SetField(typename, jtype) \
    static void \
    jni_Set##typename##Field(void*, jobject obj, jfieldID fieldID, jtype val) \
    { \
        (*jni_env)->Set##typename##Field(jni_env, obj, fieldID, val); \
    }

static jfieldID
jni_GetStaticFieldID(void*, jclass clazz, const char* name, const char* sig)
{
    // TODO: sanitize name and sig
    return (*jni_env)->GetStaticFieldID(jni_env, clazz, name, sig);
}

#define DEFINE_GetStaticField(typename, jtype) \
    static jtype \
    jni_GetStatic##typename##Field(void*, jobject obj, jfieldID fieldID) \
    { \
        return (*jni_env)->GetStatic##typename##Field(jni_env, obj, fieldID); \
    }

#define DEFINE_SetStaticField(typename, jtype) \
    static void \
    jni_SetStatic##typename##Field(void*, jobject obj, jfieldID fieldID, jtype val) \
    { \
        (*jni_env)->SetStatic##typename##Field(jni_env, obj, fieldID, val); \
    }

DEFINE_GetField(Object, jobject)
DEFINE_GetField(Boolean, jboolean)
DEFINE_GetField(Byte, jbyte)
DEFINE_GetField(Char, jchar)
DEFINE_GetField(Short, jshort)
DEFINE_GetField(Int, jint)
DEFINE_GetField(Long, jlong)
DEFINE_GetField(Float, jfloat)
DEFINE_GetField(Double, jdouble)
DEFINE_SetField(Object, jobject)
DEFINE_SetField(Boolean, jboolean)
DEFINE_SetField(Byte, jbyte)
DEFINE_SetField(Char, jchar)
DEFINE_SetField(Short, jshort)
DEFINE_SetField(Int, jint)
DEFINE_SetField(Long, jlong)
DEFINE_SetField(Float, jfloat)
DEFINE_SetField(Double, jdouble)
DEFINE_GetStaticField(Object, jobject)
DEFINE_GetStaticField(Boolean, jboolean)
DEFINE_GetStaticField(Byte, jbyte)
DEFINE_GetStaticField(Char, jchar)
DEFINE_GetStaticField(Short, jshort)
DEFINE_GetStaticField(Int, jint)
DEFINE_GetStaticField(Long, jlong)
DEFINE_GetStaticField(Float, jfloat)
DEFINE_GetStaticField(Double, jdouble)
DEFINE_SetStaticField(Object, jobject)
DEFINE_SetStaticField(Boolean, jboolean)
DEFINE_SetStaticField(Byte, jbyte)
DEFINE_SetStaticField(Char, jchar)
DEFINE_SetStaticField(Short, jshort)
DEFINE_SetStaticField(Int, jint)
DEFINE_SetStaticField(Long, jlong)
DEFINE_SetStaticField(Float, jfloat)
DEFINE_SetStaticField(Double, jdouble)

static ht_t jni_buffers;

#define DEFINE_GetArrayElements(typename, jtype) \
    static jtype* \
    jni_Get##typename##ArrayElements(void*, jtype##Array array, jboolean* isCopy) \
    { \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        jtype* sandbox_array = {{.lib}}_malloc(len * sizeof(jtype)); \
        if (!sandbox_array) \
            return NULL; \
        jtype* native_array = (*jni_env)->Get##typename##ArrayElements(jni_env, array, isCopy); \
        assert(native_array); \
        memcpy(sandbox_array, native_array, len * sizeof(jtype)); \
        int ok = ht_put(&jni_buffers, sandbox_array, native_array); \
        assert(ok >= 0); \
        return sandbox_array; \
    }

#define DEFINE_ReleaseArrayElements(typename, jtype) \
    static void \
    jni_Release##typename##ArrayElements(void* e, jtype##Array array, jtype* sandbox_array, jint mode) \
    { \
        bool found; \
        void* native_array = ht_get(&jni_buffers, sandbox_array, &found); \
        if (!found) \
            return; \
        jsize len = (*jni_env)->GetArrayLength(jni_env, array); \
        switch (mode) { \
        case 0: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, 0); \
            break; \
        case JNI_COMMIT: \
            memcpy(native_array, sandbox_array, len * sizeof(jint)); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_COMMIT); \
            break; \
        case JNI_ABORT: \
            {{.lib}}_free(sandbox_array); \
            (*jni_env)->Release##typename##ArrayElements(jni_env, array, native_array, JNI_ABORT); \
            break; \
        } \
    }

// TODO: sanitize buf
#define DEFINE_SetArrayRegion(typename, jtype) \
    static void \
    jni_Set##typename##ArrayRegion(void*, jtype##Array array, jsize start, jsize len, const jtype* buf) \
    { \
        (*jni_env)->Set##typename##ArrayRegion(jni_env, array, start, len, buf); \
    }

#define DEFINE_NewArray(typename, jtype) \
    static jtype##Array \
    jni_New##typename##Array(void*, jsize len) \
    { \
        return (*jni_env)->New##typename##Array(jni_env, len); \
    }

DEFINE_GetArrayElements(Boolean, jboolean)
DEFINE_GetArrayElements(Byte, jbyte)
DEFINE_GetArrayElements(Char, jchar)
DEFINE_GetArrayElements(Short, jshort)
DEFINE_GetArrayElements(Int, jint)
DEFINE_GetArrayElements(Long, jlong)
DEFINE_GetArrayElements(Float, jfloat)
DEFINE_GetArrayElements(Double, jdouble)
DEFINE_NewArray(Boolean, jboolean)
DEFINE_NewArray(Byte, jbyte)
DEFINE_NewArray(Char, jchar)
DEFINE_NewArray(Short, jshort)
DEFINE_NewArray(Int, jint)
DEFINE_NewArray(Long, jlong)
DEFINE_NewArray(Float, jfloat)
DEFINE_NewArray(Double, jdouble)
DEFINE_SetArrayRegion(Boolean, jboolean)
DEFINE_SetArrayRegion(Byte, jbyte)
DEFINE_SetArrayRegion(Char, jchar)
DEFINE_SetArrayRegion(Short, jshort)
DEFINE_SetArrayRegion(Int, jint)
DEFINE_SetArrayRegion(Long, jlong)
DEFINE_SetArrayRegion(Float, jfloat)
DEFINE_SetArrayRegion(Double, jdouble)
DEFINE_ReleaseArrayElements(Boolean, jboolean)
DEFINE_ReleaseArrayElements(Byte, jbyte)
DEFINE_ReleaseArrayElements(Char, jchar)
DEFINE_ReleaseArrayElements(Short, jshort)
DEFINE_ReleaseArrayElements(Int, jint)
DEFINE_ReleaseArrayElements(Long, jlong)
DEFINE_ReleaseArrayElements(Float, jfloat)
DEFINE_ReleaseArrayElements(Double, jdouble)

bool
lfi_jni_init(void)
{
    struct JNIProxy* proxy = {{ .lib }}_malloc(sizeof(struct JNIProxy));
    if (!proxy) {
        fprintf(stderr, "proxy object allocation failed\n");
        goto err1;
    }
    memset(proxy, 0, sizeof(struct JNIProxy));
    jni_proxy = {{ .lib }}_malloc(sizeof(struct JNIProxy*));
    if (!jni_proxy) {
        fprintf(stderr, "failed to allocate jni_proxy pointer\n");
        goto err2;
    }

    if (ht_alloc(&jni_buffers, 16) < 0)
        goto err3;

    void* disabled = {{ .lib }}_register_cb(&jni_Disabled, 0);
    assert(disabled);

    void** fns = (void**) proxy;
    for (size_t i = 4; i < sizeof(struct JNIProxy) / sizeof(void*); i++) {
        fns[i] = disabled;
    }

    *jni_proxy = proxy;

#define JNI_REGISTER(func)                           \
    do {                                             \
        void* fn = {{ .lib }}_register_cb(&func, 0); \
        assert(fn);                                  \
        proxy->func = fn;                            \
    } while (0)                                      \

    JNI_REGISTER(jni_GetVersion);
    JNI_REGISTER(jni_GetArrayLength);
    JNI_REGISTER(jni_NewBooleanArray);
    JNI_REGISTER(jni_NewByteArray);
    JNI_REGISTER(jni_NewCharArray);
    JNI_REGISTER(jni_NewShortArray);
    JNI_REGISTER(jni_NewIntArray);
    JNI_REGISTER(jni_NewLongArray);
    JNI_REGISTER(jni_NewFloatArray);
    JNI_REGISTER(jni_NewDoubleArray);
    JNI_REGISTER(jni_GetBooleanArrayElements);
    JNI_REGISTER(jni_GetByteArrayElements);
    JNI_REGISTER(jni_GetCharArrayElements);
    JNI_REGISTER(jni_GetShortArrayElements);
    JNI_REGISTER(jni_GetIntArrayElements);
    JNI_REGISTER(jni_GetLongArrayElements);
    JNI_REGISTER(jni_GetFloatArrayElements);
    JNI_REGISTER(jni_GetDoubleArrayElements);
    JNI_REGISTER(jni_ReleaseBooleanArrayElements);
    JNI_REGISTER(jni_ReleaseByteArrayElements);
    JNI_REGISTER(jni_ReleaseCharArrayElements);
    JNI_REGISTER(jni_ReleaseShortArrayElements);
    JNI_REGISTER(jni_ReleaseIntArrayElements);
    JNI_REGISTER(jni_ReleaseLongArrayElements);
    JNI_REGISTER(jni_ReleaseFloatArrayElements);
    JNI_REGISTER(jni_ReleaseDoubleArrayElements);
    JNI_REGISTER(jni_SetBooleanArrayRegion);
    JNI_REGISTER(jni_SetByteArrayRegion);
    JNI_REGISTER(jni_SetCharArrayRegion);
    JNI_REGISTER(jni_SetShortArrayRegion);
    JNI_REGISTER(jni_SetIntArrayRegion);
    JNI_REGISTER(jni_SetLongArrayRegion);
    JNI_REGISTER(jni_SetFloatArrayRegion);
    JNI_REGISTER(jni_SetDoubleArrayRegion);
    JNI_REGISTER(jni_GetFieldID);
    JNI_REGISTER(jni_GetObjectField);
    JNI_REGISTER(jni_GetBooleanField);
    JNI_REGISTER(jni_GetByteField);
    JNI_REGISTER(jni_GetCharField);
    JNI_REGISTER(jni_GetShortField);
    JNI_REGISTER(jni_GetIntField);
    JNI_REGISTER(jni_GetLongField);
    JNI_REGISTER(jni_GetFloatField);
    JNI_REGISTER(jni_GetDoubleField);
    JNI_REGISTER(jni_SetObjectField);
    JNI_REGISTER(jni_SetBooleanField);
    JNI_REGISTER(jni_SetByteField);
    JNI_REGISTER(jni_SetCharField);
    JNI_REGISTER(jni_SetShortField);
    JNI_REGISTER(jni_SetIntField);
    JNI_REGISTER(jni_SetLongField);
    JNI_REGISTER(jni_SetFloatField);
    JNI_REGISTER(jni_SetDoubleField);
    JNI_REGISTER(jni_GetStaticFieldID);
    JNI_REGISTER(jni_GetStaticObjectField);
    JNI_REGISTER(jni_GetStaticBooleanField);
    JNI_REGISTER(jni_GetStaticByteField);
    JNI_REGISTER(jni_GetStaticCharField);
    JNI_REGISTER(jni_GetStaticShortField);
    JNI_REGISTER(jni_GetStaticIntField);
    JNI_REGISTER(jni_GetStaticLongField);
    JNI_REGISTER(jni_GetStaticFloatField);
    JNI_REGISTER(jni_GetStaticDoubleField);
    JNI_REGISTER(jni_SetStaticObjectField);
    JNI_REGISTER(jni_SetStaticBooleanField);
    JNI_REGISTER(jni_SetStaticByteField);
    JNI_REGISTER(jni_SetStaticCharField);
    JNI_REGISTER(jni_SetStaticShortField);
    JNI_REGISTER(jni_SetStaticIntField);
    JNI_REGISTER(jni_SetStaticLongField);
    JNI_REGISTER(jni_SetStaticFloatField);
    JNI_REGISTER(jni_SetStaticDoubleField);
    JNI_REGISTER(jni_Throw);
    JNI_REGISTER(jni_ThrowNew);
    JNI_REGISTER(jni_ExceptionOccurred);
    JNI_REGISTER(jni_ExceptionDescribe);
    JNI_REGISTER(jni_ExceptionClear);
    JNI_REGISTER(jni_FatalError);

    return true;

err3:
    {{ .lib }}_free(jni_proxy);
err2:
    {{ .lib }}_free(proxy);
err1:
    return false;
}

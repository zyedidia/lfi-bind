// for memfd_create
#define _GNU_SOURCE
#include <assert.h>
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <syscall.h>
#include <sys/mman.h>

#include "lfi.h"
#include "lfi_tux.h"

int
memfd_create(const char* name, unsigned flags)
{
    return syscall(SYS_memfd_create, name, flags);
}

enum {
    LIB_PATH_MAX = 64,
};

struct FileData {
    uint8_t* start;
    uint8_t* end;
};

struct File {
    struct FileData* data;
    FILE* file;
};

static bool cbinit(struct LFIContext* ctx);

extern void {{.lib}}_cbtrampoline();

extern char* lfibind_filenames[];
extern struct FileData lfibind_filedata[];
extern size_t lfibind_nfiles;

extern void* __lfi_trampotable[];
extern size_t __lfi_trampotable_size;
extern char* __lfi_trampolines;

extern void* __lfisym__lfi_pause;
extern void* __lfisym__lfi_thread_create;

static struct FileData*
findfiledata(const char* filename)
{
    for (size_t i = 0; i < lfibind_nfiles; i++) {
        if (strncmp(filename, lfibind_filenames[i], LIB_PATH_MAX) == 0)
            return &lfibind_filedata[i];
    }
    return NULL;
}

static void
install_trampotable(void** table)
{
    for (size_t i = 0; i < __lfi_trampotable_size; i++) {
        __lfi_trampotable[i] = table[i];
    }
}

struct LFILibCalls* lfi;

static struct HostFile*
fsopen(const char* filename, int flags, int mode)
{
    (void) flags, (void) mode;
    struct FileData* data = findfiledata(filename);
    if (data) {
        int fd = memfd_create("", 0);
        if (fd < 0)
            return NULL;
        if (ftruncate(fd, data->end - data->start) < 0)
            goto err;
        if (write(fd, data->start, data->end - data->start) < 0)
            goto err;
        lseek(fd, 0, SEEK_SET);
        assert(lfi);
        return lfi->lfi_host_fdopen(fd);
err:
        close(fd);
        return NULL;
    }
    return NULL;
}

static void
lib_init(struct LFILibCalls* lfi_)
{
    assert(lfi_);
    lfi = lfi_;

    struct LFIPlatform* plat = lfi->lfi_new_plat((struct LFIPlatOptions) {
        .pagesize = getpagesize(),
        .vmsize = 4UL * 1024 * 1024 * 1024,
    });
    if (!plat) {
        fprintf(stderr, "sobox: error loading LFI: %s\n", lfi->lfi_strerror());
        exit(1);
    }

    struct Tux* tux = lfi->lfi_tux_new(plat, (struct TuxOptions) {
        .pagesize = getpagesize(),
        .stacksize = 2 * 1024 * 1024,
        .pause_on_exit = true,
        .fs = (struct TuxFS) {
            .open = fsopen,
        },
        .verbose = true,
    });

    if (!tux) {
        fprintf(stderr, "sobox: error loading LFI: %s\n", lfi->lfi_strerror());
        exit(1);
    }

    struct FileData* stub = findfiledata("stub");
    if (!stub) {
        fprintf(stderr, "sobox: error loading LFI: could not find stub file\n");
        exit(1);
    }

    char* args[] = {"stub", NULL};
    struct TuxThread* p = lfi->lfi_tux_proc_new(tux, stub->start, stub->end - stub->start, 1, &args[0]);
    if (!p) {
        fprintf(stderr, "sobox: error creating LFI process: %s\n", lfi->lfi_strerror());
        exit(1);
    }

    bool ok = cbinit(lfi->lfi_tux_ctx(p));
    if (!ok) {
        fprintf(stderr, "sobox: failed to initialize callback entries\n");
        exit(1);
    }

    lfi->lfi_tux_libinit(tux, true);

    uint64_t r = lfi->lfi_tux_proc_run(p);
    if (r < 256) {
        fprintf(stderr, "sobox: failed to start LFI process\n");
        exit(1);
    }

    lfi->lfi_tux_libinit(tux, false);

    // TODO: validate the trampoline table (its location) before installing it,
    // since intalling it involves reading from sandbox memory. Possibly also
    // validate its contents (not entirely necessary if the trampoline uses
    // uses a safe bundle-aligned jump for entry, but probably still a good
    // idea).
    install_trampotable((void**) r);

    extern void lfi_jni_init();
    lfi_jni_init();
}

__attribute__((constructor)) void
{{ .lib }}_construct(void)
{
    lib_init(lfi_libcalls());
}

extern void {{ .lib }}__lfi_thread_create(void* fn);
extern void {{ .lib }}__lfi_pause(void);

void
{{ .lib }}_setup(void)
{
    lfi->lfi_thread_init({{.lib}}__lfi_thread_create, __lfisym__lfi_pause);
}

void*
{{ .lib }}_stackpush(size_t n)
{
    (void) n;
    assert(!"unimplemented");
}

size_t
{{ .lib }}_stackpop(size_t n)
{
    (void) n;
    assert(!"unimplemented");
}

#define MAXCALLBACKS 4096

static void* callbacks[MAXCALLBACKS];

static ssize_t
cbfreeslot()
{
    for (ssize_t i = 0; i < MAXCALLBACKS; i++) {
        if (!callbacks[i])
            return i;
    }
    return -1;
}

static ssize_t
cbfind(void* fn)
{
    for (size_t i = 0; i < MAXCALLBACKS; i++) {
        if (callbacks[i] == fn)
            return i;
    }
    return -1;
}

#if defined(__x86_64__) || defined(_M_X64)
#include "arch/x64/callback.c"
#elif defined(__aarch64__) || defined(_M_ARM64)
#include "arch/arm64/callback.c"
#endif

.section ".text.trampolines"

#define N_RTCALLS 256
#define PROC_REGS 16
#define REG_BASE  x21
#define REG_SYS_  x25

.macro get_ctx
#ifndef NODLOPEN
	mov x11, x0
	mov x9, x30
	adrp x0, :tlsdesc:lfi_myctx
	ldr x8, [x0, :tlsdesc_lo12:lfi_myctx]
	add x0, x0, :tlsdesc_lo12:lfi_myctx
	.tlsdesccall lfi_myctx
	blr x8
	mrs x8, tpidr_el0
	ldr x8, [x8, x0]
	mov x30, x9
	mov x0, x11
#else
	mrs	x8, tpidr_el0
	add	x8, x8, #:tprel_hi12:lfi_myctx, lsl #12
	add	x8, x8, #:tprel_lo12_nc:lfi_myctx
	ldr	x8, [x8]
#endif
.endm

.lfi_trampoline_slowpath:
	stp x0, x1, [sp, #-16]!
	stp x2, x3, [sp, #-16]!
	stp x4, x5, [sp, #-16]!
	stp x6, x7, [sp, #-16]!
	stp x10, xzr, [sp, #-16]!
	stp q0, q1, [sp, #-32]!
	stp q2, q3, [sp, #-32]!
	stp q4, q5, [sp, #-32]!
	stp q6, q7, [sp, #-32]!
	bl {{.lib}}_setup
	ldp q6, q7, [sp], 32
	ldp q4, q5, [sp], 32
	ldp q2, q3, [sp], 32
	ldp q0, q1, [sp], 32
	ldp x10, xzr, [sp], 16
	ldp x6, x7, [sp], 16
	ldp x4, x5, [sp], 16
	ldp x2, x3, [sp], 16
	ldp x0, x1, [sp], 16
	get_ctx
	b 1f

.lfi_trampoline_stack:
	stp d8, d9,   [sp, #-16]!
	stp d10, d11, [sp, #-16]!
	stp d12, d13, [sp, #-16]!
	stp d14, d15, [sp, #-16]!
	stp x19, x20, [sp, #-16]!
	stp x21, x22, [sp, #-16]!
	stp x23, x24, [sp, #-16]!
	stp x25, x26, [sp, #-16]!
	stp x27, x28, [sp, #-16]!
	stp x29, x30, [sp, #-16]!
	get_ctx // puts lfi_myctx in x8

	cbz x8, .lfi_trampoline_slowpath
1:
	ldr x12, [x8, PROC_REGS+16*15+8]
	// save user sp to stack
	ldr x13, [x8]
	stp x12, x13, [sp, #-16]!
	// save kernel stack
	mov x11, sp
	str x11, [x8]
	// set user stack
	mov sp, x12
	// set return address to __lfisym__lfi_retfn
	adrp x11, :got:__lfisym__lfi_retfn
	ldr x11, [x11, :got_lo12:__lfisym__lfi_retfn]
	ldr x30, [x11]
	// set base pointer
	ldr REG_BASE, [x8, PROC_REGS+8*21]
	ldr REG_SYS_, [x8, PROC_REGS+8*25]
	// set address pointer to a valid value
	mov x18, REG_BASE
	mov x8, #0
.entry_stack:
	add x10, REG_BASE, w10, uxtw
	br x10
	brk #0

.global __lfi_trampoline
__lfi_trampoline:
.lfi_trampoline:
	stp d8, d9,   [sp, #-16]!
	stp d10, d11, [sp, #-16]!
	stp d12, d13, [sp, #-16]!
	stp d14, d15, [sp, #-16]!
	stp x19, x20, [sp, #-16]!
	stp x21, x22, [sp, #-16]!
	stp x23, x24, [sp, #-16]!
	stp x25, x26, [sp, #-16]!
	stp x27, x28, [sp, #-16]!
	stp x29, x30, [sp, #-16]!
	get_ctx // puts lfi_myctx in x8

	cbz x8, .lfi_trampoline_slowpath
1:
	ldr x12, [x8, PROC_REGS+16*15+8]
	// save user sp to stack
	ldr x13, [x8]
	stp x12, x13, [sp, #-16]!
	// save kernel stack
	mov x11, sp
	str x11, [x8]
	// set user stack
	mov sp, x12
	// set return address to __lfisym__lfi_retfn
	adrp x11, :got:__lfisym__lfi_retfn
	ldr x11, [x11, :got_lo12:__lfisym__lfi_retfn]
	ldr x30, [x11]
	// set base pointer
	ldr REG_BASE, [x8, PROC_REGS+8*21]
	ldr REG_SYS_, [x8, PROC_REGS+8*25]
	// set address pointer to a valid value
	mov x18, REG_BASE
	mov x8, #0
.entry:
	add x10, REG_BASE, w10, uxtw
	br x10
	brk #0

.global __lfi_trampolines
__lfi_trampolines:
{{- range $sym := .exported }}
.p2align 4
.global {{$sym}}
{{$sym}}:
	bti jc
	adrp x10, :got:__lfisym_{{$sym}}
	ldr x10, [x10, :got_lo12:__lfisym_{{$sym}}]
	ldr x10, [x10]
	{{if (has_stack_args $sym)}}
	b .lfi_trampoline_stack
	{{else}}
	b .lfi_trampoline
	{{end}}
{{- end}}

{{- range $sym := .exposed}}
.p2align 4
.global {{$.lib}}_{{$sym}}
{{$.lib}}_{{$sym}}:
	bti jc
	adrp x10, :got:__lfisym_{{$sym}}
	ldr x10, [x10, :got_lo12:__lfisym_{{$sym}}]
	ldr x10, [x10]
	{{if (has_stack_args $sym)}}
	b .lfi_trampoline_stack
	{{else}}
	b .lfi_trampoline
	{{end}}
{{- end}}

.section ".data.trampolines"

.global __lfi_trampotable
__lfi_trampotable:

{{- range $sym := .exported}}
.global __lfisym_{{$sym}}
__lfisym_{{$sym}}:
	.quad 0
{{- end}}

{{- range $sym := .exposed}}
.global __lfisym_{{$sym}}
__lfisym_{{$sym}}:
	.quad 0
{{- end}}

.global __lfi_trampotable_size
__lfi_trampotable_size:
	.quad {{.nexported}}+{{.nexposed}}

.global __lfisym__lfi_pause
.global __lfisym__lfi_thread_create

.section .note.GNU-stack,"",@progbits

.section ".text.trampolines"

.global __lfi_trampoline, __sbx_entry
__lfi_trampoline:
	pushq %r15
	pushq %r14
	pushq %r13
	pushq %r12
	pushq %rbx
	pushq %rbp
	movq lfi_myproc@gottpoff(%rip), %r11
	movq %fs:(%r11), %r11
	movq %rsp, 0(%r11) # kstackp
	movq 16(%r11), %rsp # stack pointer
	movq 16+14*8(%r11), %r14 # base pointer
	mov __lfisym_retfn@GOTPCREL(%rip), %r11
	mov (%r11), %r11
	andq $0xfffffffffffffff0, %rsp
	pushq %r11
	xor %r11d, %r11d
	# TODO: make sure r10 is bundle-aligned and within the sandbox
__sbx_entry:
	jmpq *%r10
	int3

.global __lfi_trampolines
__lfi_trampolines:
{{- range $sym := .syms }}
.p2align 4
.global {{$sym}}
{{$sym}}:
	movq __lfisym_{{$sym}}@GOTPCREL(%rip), %r10
	movq (%r10), %r10
	jmp __lfi_trampoline
{{- end}}

{{- range $sym := .sbxsyms}}
.p2align 4
.global sbx_{{$sym}}
sbx_{{$sym}}:
	movq __lfisym_{{$sym}}@GOTPCREL(%rip), %r10
	movq (%r10), %r10
	jmp __lfi_trampoline
{{- end}}

.section ".data.trampolines"

.global __lfi_trampotable
__lfi_trampotable:

{{- range $sym := .syms}}
__lfisym_{{$sym}}:
	.quad 0
{{- end}}

{{- range $sym := .sbxsyms}}
__lfisym_{{$sym}}:
	.quad 0
{{- end}}

.global __lfi_trampotable_size
__lfi_trampotable_size:
	.quad {{.nsyms}}+{{.nsbxsyms}}

.section .note.GNU-stack,"",@progbits
